//
//  DVAutoGeneratedPropertiesHelpers.m
//  DVAutoGeneratedProperties
//
//  Created by Vladislav Dugnist on 04/03/2018.
//

#import "DVAutoGeneratedPropertiesHelpers.h"

BOOL sel_isGetterOrSetter(SEL sel) {
    NSString *selectorString = NSStringFromSelector(sel);
    NSUInteger colonsCount = [selectorString componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@":"]].count - 1;
    
    if (colonsCount == 0) {
        return YES;
    }
    else if (colonsCount == 1) {
        return sel_isSetter(sel);
    }
    else {
        return NO;
    }
}

BOOL sel_isSetter(SEL sel) {
    NSString *selectorString = NSStringFromSelector(sel);
    NSString *setterPrefix = @"set";
    
    BOOL hasSetterPrefix = selectorString.length > setterPrefix.length && [selectorString hasPrefix:setterPrefix];
    if (hasSetterPrefix) {
        NSString *firstLetterAfterPrefix = [selectorString substringWithRange:NSMakeRange(setterPrefix.length, 1)];
        BOOL isFirstLetterAfterPrefixCapitalized = ![firstLetterAfterPrefix isEqualToString:firstLetterAfterPrefix.lowercaseString];
        return isFirstLetterAfterPrefixCapitalized;
    }
    
    return NO;
}

SEL sel_getterFromSetter(SEL setter) {
    NSCAssert(sel_isSetter(setter), @"argument is not setter");
    NSString *setterString = NSStringFromSelector(setter);
    NSString *setterPrefix = @"set";
    NSString *lowercasedFirstLetterAfterPrefix = [setterString substringWithRange:NSMakeRange(setterPrefix.length, 1)].lowercaseString;
    NSUInteger prefixAndFirstLetterLength = setterPrefix.length + lowercasedFirstLetterAfterPrefix.length;
    
    // substring without prefix, first letter and last symbol (column)
    NSRange rangeForSubstring = NSMakeRange(prefixAndFirstLetterLength, setterString.length - prefixAndFirstLetterLength - 1);
    NSString *getterSelectorString = [lowercasedFirstLetterAfterPrefix stringByAppendingString:[setterString substringWithRange:rangeForSubstring]];
    return NSSelectorFromString(getterSelectorString);
}

objc_property_t classPropertyForSelector(Class aClass, SEL sel) {
    if (sel_isSetter(sel)) {
        sel = sel_getterFromSetter(sel);
    }
    
    const char *selectorString = [NSStringFromSelector(sel) cStringUsingEncoding:NSUTF8StringEncoding];
    return class_getProperty(object_getClass(aClass), selectorString);
}

char *copySetterMethodTypesForProperty(objc_property_t property) {
    char *types = malloc(5 * sizeof(char));
    types[0] = 'v'; // return type - void
    types[1] = '@'; // first invocation argument - self (object)
    types[2] = ':'; // second invocation argument - selector
    types[3] = typeEncodingForProperty(property); // third invocation argument - property to set (type of property)
    types[4] = '\0';
    
    return types;
}

char *copyGetterMethodTypesForProperty(objc_property_t property) {
    char *types = malloc(4 * sizeof(char));
    types[0] = typeEncodingForProperty(property); // return type - property type
    types[1] = '@'; // first invocation argument - self (object)
    types[2] = ':'; // second invocation argument - selector
    types[3] = '\0';
    
    return types;
}

const char typeEncodingForProperty(objc_property_t property) {
    // second symbol is property type encoding
    // https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101
    return property_getAttributes(property)[1];
}
